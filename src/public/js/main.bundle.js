/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkPortfolio2021=self.webpackChunkPortfolio2021||[]).push([["main"],{"./src/js/app.js":(e,t,a)=>{"use strict";a.r(t);var r=a("./src/js/data/config.js"),n=a("./src/js/utils/detector.js"),s=a("./src/js/app/main.js");a("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),r.default.isDev=!0,function(){if(n.default.webgl){const e=document.getElementById("appContainer");new s.default(e)}else n.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>s});var r=a("./node_modules/three/build/three.module.js"),n=a("./src/js/data/config.js");class s{constructor(e){const t=e.domElement.width,a=e.domElement.height;this.threeCamera=new r.PerspectiveCamera(n.default.camera.fov,t/a,n.default.camera.near,n.default.camera.far),this.threeCamera.position.set(n.default.camera.posX,n.default.camera.posY,n.default.camera.posZ),this.updateSize(e),window.addEventListener("resize",(()=>this.updateSize(e)),!1)}updateSize(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}},"./src/js/app/components/controls.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>i});var r=a("./node_modules/three/build/three.module.js"),n=a("./src/js/utils/orbitControls.js"),s=a.n(n),o=a("./src/js/data/config.js");class i{constructor(e,t){const a=new(s())(r);this.threeControls=new a(e,t),this.init()}init(){this.threeControls.target.set(o.default.controls.target.x,o.default.controls.target.y,o.default.controls.target.z),this.threeControls.autoRotate=o.default.controls.autoRotate,this.threeControls.autoRotateSpeed=o.default.controls.autoRotateSpeed,this.threeControls.rotateSpeed=o.default.controls.rotateSpeed,this.threeControls.zoomSpeed=o.default.controls.zoomSpeed,this.threeControls.minDistance=o.default.controls.minDistance,this.threeControls.maxDistance=o.default.controls.maxDistance,this.threeControls.minPolarAngle=o.default.controls.minPolarAngle,this.threeControls.maxPolarAngle=o.default.controls.maxPolarAngle,this.threeControls.enableDamping=o.default.controls.enableDamping,this.threeControls.enableZoom=o.default.controls.enableZoom,this.threeControls.dampingFactor=o.default.controls.dampingFactor}}},"./src/js/app/components/geometry.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>o});var r=a("./node_modules/three/build/three.module.js"),n=a("./src/js/app/components/material.js"),s=a("./src/js/data/config.js");class o{constructor(e){this.scene=e,this.geo=null}make(e){return"plane"===e?(e,t,a=1,n=1)=>{this.geo=new r.PlaneGeometry(e,t,a,n)}:"sphere"===e?(e,t=32,a=32)=>{this.geo=new r.SphereGeometry(e,t,a)}:void 0}place(e,t){const a=new n.default(15658734).standard,o=new r.Mesh(this.geo,a);o.position.set(...e),o.rotation.set(...t),s.default.shadow.enabled&&(o.receiveShadow=!0),this.scene.add(o)}}},"./src/js/app/components/light.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>s});var r=a("./node_modules/three/build/three.module.js"),n=a("./src/js/data/config.js");class s{constructor(e){this.scene=e,this.init()}init(){this.ambientLight=new r.AmbientLight(n.default.ambientLight.color),this.ambientLight.visible=n.default.ambientLight.enabled,this.pointLight=new r.PointLight(n.default.pointLight.color,n.default.pointLight.intensity,n.default.pointLight.distance),this.pointLight.position.set(n.default.pointLight.x,n.default.pointLight.y,n.default.pointLight.z),this.pointLight.visible=n.default.pointLight.enabled,this.directionalLight=new r.DirectionalLight(n.default.directionalLight.color,n.default.directionalLight.intensity),this.directionalLight.position.set(n.default.directionalLight.x,n.default.directionalLight.y,n.default.directionalLight.z),this.directionalLight.visible=n.default.directionalLight.enabled,this.directionalLight.castShadow=n.default.shadow.enabled,this.directionalLight.shadow.bias=n.default.shadow.bias,this.directionalLight.shadow.camera.near=n.default.shadow.near,this.directionalLight.shadow.camera.far=n.default.shadow.far,this.directionalLight.shadow.camera.left=n.default.shadow.left,this.directionalLight.shadow.camera.right=n.default.shadow.right,this.directionalLight.shadow.camera.top=n.default.shadow.top,this.directionalLight.shadow.camera.bottom=n.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=n.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=n.default.shadow.mapHeight,n.default.isDev&&(this.directionalLightHelper=new r.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=n.default.shadow.helperEnabled),this.hemiLight=new r.HemisphereLight(n.default.hemiLight.color,n.default.hemiLight.groundColor,n.default.hemiLight.intensity),this.hemiLight.position.set(n.default.hemiLight.x,n.default.hemiLight.y,n.default.hemiLight.z),this.hemiLight.visible=n.default.hemiLight.enabled}place(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),n.default.isDev&&this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}},"./src/js/app/components/material.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>n});var r=a("./node_modules/three/build/three.module.js");class n{constructor(e){this.basic=new r.MeshBasicMaterial({color:e,side:r.DoubleSide}),this.standard=new r.MeshStandardMaterial({color:e,shading:r.FlatShading,roughness:1,metalness:0,side:r.DoubleSide}),this.wire=new r.MeshBasicMaterial({wireframe:!0})}}},"./src/js/app/components/renderer.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>s});var r=a("./node_modules/three/build/three.module.js"),n=a("./src/js/data/config.js");class s{constructor(e,t){this.scene=e,this.container=t,this.threeRenderer=new r.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(e.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),t.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=r.PCFSoftShadowMap,n.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(()=>this.updateSize()),!1),window.addEventListener("resize",(()=>this.updateSize()),!1)}updateSize(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}render(e,t){this.threeRenderer.render(e,t)}}},"./src/js/app/helpers/meshHelper.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>s});var r=a("./node_modules/three/build/three.module.js"),n=a("./src/js/app/helpers/vertexNormalsHelper.js");class s{constructor(e,t){this.mesh=t,this.scene=e;const a=new r.WireframeGeometry(this.mesh.geometry);this.wireLine=new r.LineSegments(a),this.wireLine.material.depthTest=!1,this.wireLine.material.opacity=.25,this.wireLine.material.transparent=!0;const s=new r.EdgesGeometry(this.mesh.geometry);this.edgesLine=new r.LineSegments(s),this.edgesLine.material.depthTest=!1,this.edgesLine.material.opacity=.25,this.edgesLine.material.transparent=!0,this.vertexHelper=new n.VertexNormalsHelper(this.mesh,2),this.boxHelper=new r.BoxHelper(this.mesh)}enable(){this.mesh.add(this.wireLine),this.mesh.add(this.edgesLine),this.scene.add(this.vertexHelper),this.scene.add(this.boxHelper)}disable(){this.mesh.remove(this.wireLine),this.mesh.remove(this.edgesLine),this.scene.remove(this.vertexHelper),this.scene.remove(this.boxHelper)}}},"./src/js/app/helpers/stats.js":(e,t,a)=>{"use strict";let r,n,s,o;a.r(t),a.d(t,{default:()=>i});class i{constructor(e){this.renderer=e}setUp(){n=new BrowserStats,s=new glStats,o=new threeStats(this.renderer.threeRenderer),r=new rStats({CSSPath:"./css/",userTimingAPI:!0,values:{frame:{caption:"Total frame time (ms)",over:16,average:!0,avgMs:100},fps:{caption:"Framerate (FPS)",below:30},calls:{caption:"Calls (three.js)",over:3e3},raf:{caption:"Time since last rAF (ms)",average:!0,avgMs:100},rstats:{caption:"rStats update (ms)",average:!0,avgMs:100},texture:{caption:"GenTex",average:!0,avgMs:100}},groups:[{caption:"Framerate",values:["fps","raf"]},{caption:"Frame Budget",values:["frame","texture","setup","render"]}],fractions:[{base:"frame",steps:["texture","setup","render"]}],plugins:[n,o]})}static start(){r("frame").start(),s.start(),r("rAF").tick(),r("FPS").frame(),r("render").start()}static end(){r("render").end(),r("frame").end(),r("rStats").start(),r().update(),r("rStats").end()}}},"./src/js/app/helpers/vertexNormalsHelper.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{VertexNormalsHelper:()=>l});var r=a("./node_modules/three/build/three.module.js");const n=new r.Vector3,s=new r.Vector3,o=new r.Matrix3,i=["a","b","c"];function l(e,t,a){this.object=e,this.size=void 0!==t?t:.1;const n=void 0!==a?a:16711680;let s=0;const o=this.object.geometry;o&&o.isGeometry?s=3*o.faces.length:o&&o.isBufferGeometry&&(s=o.attributes.normal.count);const i=new r.BufferGeometry,l=new r.Float32BufferAttribute(2*s*3,3);i.setAttribute("position",l),r.LineSegments.call(this,i,new r.LineBasicMaterial({color:n,toneMapped:!1})),this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.update()}l.prototype=Object.create(r.LineSegments.prototype),l.prototype.constructor=l,l.prototype.update=function(){let e;this.object.updateMatrixWorld(!0),o.getNormalMatrix(this.object.matrixWorld);const t=this.object.matrixWorld,a=this.geometry.attributes.position,r=this.object.geometry;if(r&&r.isGeometry){const l=r.vertices,h=r.faces;e=0;for(let r=0,c=h.length;r<c;r++){const c=h[r];for(let r=0,h=c.vertexNormals.length;r<h;r++){const h=l[c[i[r]]],d=c.vertexNormals[r];n.copy(h).applyMatrix4(t),s.copy(d).applyMatrix3(o).normalize().multiplyScalar(this.size).add(n),a.setXYZ(e,n.x,n.y,n.z),e+=1,a.setXYZ(e,s.x,s.y,s.z),e+=1}}}else if(r&&r.isBufferGeometry){const i=r.attributes.position,c=r.attributes.normal;e=0;for(var l=0,h=i.count;l<h;l++)n.set(i.getX(l),i.getY(l),i.getZ(l)).applyMatrix4(t),s.set(c.getX(l),c.getY(l),c.getZ(l)),s.applyMatrix3(o).normalize().multiplyScalar(this.size).add(n),a.setXYZ(e,n.x,n.y,n.z),e+=1,a.setXYZ(e,s.x,s.y,s.z),e+=1}a.needsUpdate=!0}},"./src/js/app/loaders/GLTFLoader.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{GLTFLoader:()=>n});var r=a("./node_modules/three/build/three.module.js");const n=function(){function e(e){r.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,a){e[t]=a},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(r.Loader.prototype),{constructor:e,load:function(e,t,a,n){var s,o=this;s=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:r.LoaderUtils.extractUrlBase(e),o.manager.itemStart(e);var i=function(t){n?n(t):console.error(t),o.manager.itemError(e),o.manager.itemEnd(e)},l=new r.FileLoader(o.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===o.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(a){try{o.parse(a,s,(function(a){t(a),o.manager.itemEnd(e)}),i)}catch(e){i(e)}}),a,i)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,h,c){var p,v={};if("string"==typeof e)p=e;else if(r.LoaderUtils.decodeText(new Uint8Array(e,0,4))===l){try{v[a.KHR_BINARY_GLTF]=new d(e)}catch(e){return void(c&&c(e))}p=v[a.KHR_BINARY_GLTF].content}else p=r.LoaderUtils.decodeText(new Uint8Array(e));var b=JSON.parse(p);if(void 0===b.asset||b.asset.version[0]<2)c&&c(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(b.extensionsUsed)for(var y=0;y<b.extensionsUsed.length;++y){var w=b.extensionsUsed[y],L=b.extensionsRequired||[];switch(w){case a.KHR_LIGHTS_PUNCTUAL:v[w]=new s(b);break;case a.KHR_MATERIALS_CLEARCOAT:v[w]=new i;break;case a.KHR_MATERIALS_UNLIT:v[w]=new o;break;case a.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:v[w]=new g;break;case a.KHR_DRACO_MESH_COMPRESSION:v[w]=new u(b,this.dracoLoader);break;case a.MSFT_TEXTURE_DDS:v[w]=new n(this.ddsLoader);break;case a.KHR_TEXTURE_TRANSFORM:v[w]=new m;break;case a.KHR_MESH_QUANTIZATION:v[w]=new f;break;default:L.indexOf(w)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}new k(b,v,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(h,c)}}});var a={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function n(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=a.MSFT_TEXTURE_DDS,this.ddsLoader=e}function s(e){this.name=a.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[a.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function o(){this.name=a.KHR_MATERIALS_UNLIT}function i(){this.name=a.KHR_MATERIALS_CLEARCOAT}s.prototype.loadLight=function(e){var t,a=this.lightDefs[e],n=new r.Color(16777215);void 0!==a.color&&n.fromArray(a.color);var s=void 0!==a.range?a.range:0;switch(a.type){case"directional":(t=new r.DirectionalLight(n)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new r.PointLight(n)).distance=s;break;case"spot":(t=new r.SpotLight(n)).distance=s,a.spot=a.spot||{},a.spot.innerConeAngle=void 0!==a.spot.innerConeAngle?a.spot.innerConeAngle:0,a.spot.outerConeAngle=void 0!==a.spot.outerConeAngle?a.spot.outerConeAngle:Math.PI/4,t.angle=a.spot.outerConeAngle,t.penumbra=1-a.spot.innerConeAngle/a.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+a.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==a.intensity&&(t.intensity=a.intensity),t.name=a.name||"light_"+e,Promise.resolve(t)},o.prototype.getMaterialType=function(){return r.MeshBasicMaterial},o.prototype.extendParams=function(e,t,a){var n=[];e.color=new r.Color(1,1,1),e.opacity=1;var s=t.pbrMetallicRoughness;if(s){if(Array.isArray(s.baseColorFactor)){var o=s.baseColorFactor;e.color.fromArray(o),e.opacity=o[3]}void 0!==s.baseColorTexture&&n.push(a.assignTexture(e,"map",s.baseColorTexture))}return Promise.all(n)},i.prototype.getMaterialType=function(){return r.MeshPhysicalMaterial},i.prototype.extendParams=function(e,t,a){var n=[],s=t.extensions[this.name];if(void 0!==s.clearcoatFactor&&(e.clearcoat=s.clearcoatFactor),void 0!==s.clearcoatTexture&&n.push(a.assignTexture(e,"clearcoatMap",s.clearcoatTexture)),void 0!==s.clearcoatRoughnessFactor&&(e.clearcoatRoughness=s.clearcoatRoughnessFactor),void 0!==s.clearcoatRoughnessTexture&&n.push(a.assignTexture(e,"clearcoatRoughnessMap",s.clearcoatRoughnessTexture)),void 0!==s.clearcoatNormalTexture&&(n.push(a.assignTexture(e,"clearcoatNormalMap",s.clearcoatNormalTexture)),void 0!==s.clearcoatNormalTexture.scale)){var o=s.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new r.Vector2(o,o)}return Promise.all(n)};var l="glTF",h=1313821514,c=5130562;function d(e){this.name=a.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:r.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==l)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var n=new DataView(e,12),s=0;s<n.byteLength;){var o=n.getUint32(s,!0);s+=4;var i=n.getUint32(s,!0);if(s+=4,i===h){var d=new Uint8Array(e,12+s,o);this.content=r.LoaderUtils.decodeText(d)}else if(i===c){var u=12+s;this.body=e.slice(u,u+o)}s+=o}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function u(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=a.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function m(){this.name=a.KHR_TEXTURE_TRANSFORM}function p(e){r.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),a=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),n=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),s=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),o=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),i={specular:{value:(new r.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=i,this.onBeforeCompile=function(e){for(var r in i)e.uniforms[r]=i[r];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",a),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",n),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",s),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",o)},Object.defineProperties(this,{specular:{get:function(){return i.specular.value},set:function(e){i.specular.value=e}},specularMap:{get:function(){return i.specularMap.value},set:function(e){i.specularMap.value=e}},glossiness:{get:function(){return i.glossiness.value},set:function(e){i.glossiness.value=e}},glossinessMap:{get:function(){return i.glossinessMap.value},set:function(e){i.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function g(){return{name:a.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return p},extendParams:function(e,t,a){var n=t.extensions[this.name];e.color=new r.Color(1,1,1),e.opacity=1;var s=[];if(Array.isArray(n.diffuseFactor)){var o=n.diffuseFactor;e.color.fromArray(o),e.opacity=o[3]}if(void 0!==n.diffuseTexture&&s.push(a.assignTexture(e,"map",n.diffuseTexture)),e.emissive=new r.Color(0,0,0),e.glossiness=void 0!==n.glossinessFactor?n.glossinessFactor:1,e.specular=new r.Color(1,1,1),Array.isArray(n.specularFactor)&&e.specular.fromArray(n.specularFactor),void 0!==n.specularGlossinessTexture){var i=n.specularGlossinessTexture;s.push(a.assignTexture(e,"glossinessMap",i)),s.push(a.assignTexture(e,"specularMap",i))}return Promise.all(s)},createMaterial:function(e){var t=new p(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=r.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function f(){this.name=a.KHR_MESH_QUANTIZATION}function v(e,t,a,n){r.Interpolant.call(this,e,t,a,n)}u.prototype.decodePrimitive=function(e,t){var a=this.json,r=this.dracoLoader,n=e.extensions[this.name].bufferView,s=e.extensions[this.name].attributes,o={},i={},l={};for(var h in s){var c=C[h]||h.toLowerCase();o[c]=s[h]}for(h in e.attributes){c=C[h]||h.toLowerCase();if(void 0!==s[h]){var d=a.accessors[e.attributes[h]],u=T[d.componentType];l[c]=u,i[c]=!0===d.normalized}}return t.getDependency("bufferView",n).then((function(e){return new Promise((function(t){r.decodeDracoFile(e,(function(e){for(var a in e.attributes){var r=e.attributes[a],n=i[a];void 0!==n&&(r.normalized=n)}t(e)}),o,l)}))}))},m.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},p.prototype=Object.create(r.MeshStandardMaterial.prototype),p.prototype.constructor=p,p.prototype.copy=function(e){return r.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},v.prototype=Object.create(r.Interpolant.prototype),v.prototype.constructor=v,v.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,a=this.sampleValues,r=this.valueSize,n=e*r*3+r,s=0;s!==r;s++)t[s]=a[n+s];return t},v.prototype.beforeStart_=v.prototype.copySampleValue_,v.prototype.afterEnd_=v.prototype.copySampleValue_,v.prototype.interpolate_=function(e,t,a,r){for(var n=this.resultBuffer,s=this.sampleValues,o=this.valueSize,i=2*o,l=3*o,h=r-t,c=(a-t)/h,d=c*c,u=d*c,m=e*l,p=m-l,g=-2*u+3*d,f=u-d,v=1-g,b=f-d+c,y=0;y!==o;y++){var w=s[p+y+o],L=s[p+y+i]*h,M=s[m+y+o],x=s[m+y]*h;n[y]=v*w+b*L+g*M+f*x}return n};var b=0,y=1,w=2,L=3,M=4,x=5,E=6,T={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},R={9728:r.NearestFilter,9729:r.LinearFilter,9984:r.NearestMipmapNearestFilter,9985:r.LinearMipmapNearestFilter,9986:r.NearestMipmapLinearFilter,9987:r.LinearMipmapLinearFilter},S={33071:r.ClampToEdgeWrapping,33648:r.MirroredRepeatWrapping,10497:r.RepeatWrapping},A={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},C={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},j={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},P={CUBICSPLINE:void 0,LINEAR:r.InterpolateLinear,STEP:r.InterpolateDiscrete},_="OPAQUE",F="MASK",H="BLEND",U={"image/png":r.RGBAFormat,"image/jpeg":r.RGBFormat};function I(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function D(e,t,a){for(var r in a.extensions)void 0===e[r]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[r]=a.extensions[r])}function O(e,t){void 0!==t.extras&&("object"==typeof t.extras?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function G(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var a=0,r=t.weights.length;a<r;a++)e.morphTargetInfluences[a]=t.weights[a];if(t.extras&&Array.isArray(t.extras.targetNames)){var n=t.extras.targetNames;if(e.morphTargetInfluences.length===n.length){e.morphTargetDictionary={};for(a=0,r=n.length;a<r;a++)e.morphTargetDictionary[n[a]]=a}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function B(e){for(var t="",a=Object.keys(e).sort(),r=0,n=a.length;r<n;r++)t+=a[r]+":"+e[a[r]]+";";return t}function k(e,a,n){this.json=e||{},this.extensions=a||{},this.options=n||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new r.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new r.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function N(e,t,a){var n=t.attributes,s=[];function o(t,r){return a.getDependency("accessor",t).then((function(t){e.setAttribute(r,t)}))}for(var i in n){var l=C[i]||i.toLowerCase();l in e.attributes||s.push(o(n[i],l))}if(void 0!==t.indices&&!e.index){var h=a.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));s.push(h)}return O(e,t),function(e,t,a){var n=t.attributes,s=new r.Box3;if(void 0!==n.POSITION){var o=(m=a.json.accessors[n.POSITION]).min,i=m.max;if(void 0!==o&&void 0!==i){s.set(new r.Vector3(o[0],o[1],o[2]),new r.Vector3(i[0],i[1],i[2]));var l=t.targets;if(void 0!==l){for(var h=new r.Vector3,c=new r.Vector3,d=0,u=l.length;d<u;d++){var m,p=l[d];if(void 0!==p.POSITION)o=(m=a.json.accessors[p.POSITION]).min,i=m.max,void 0!==o&&void 0!==i?(c.setX(Math.max(Math.abs(o[0]),Math.abs(i[0]))),c.setY(Math.max(Math.abs(o[1]),Math.abs(i[1]))),c.setZ(Math.max(Math.abs(o[2]),Math.abs(i[2]))),h.max(c)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}s.expandByVector(h)}e.boundingBox=s;var g=new r.Sphere;s.getCenter(g.center),g.radius=s.min.distanceTo(s.max)/2,e.boundingSphere=g}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,a),Promise.all(s).then((function(){return void 0!==t.targets?function(e,t,a){for(var r=!1,n=!1,s=0,o=t.length;s<o&&(void 0!==(h=t[s]).POSITION&&(r=!0),void 0!==h.NORMAL&&(n=!0),!r||!n);s++);if(!r&&!n)return Promise.resolve(e);var i=[],l=[];for(s=0,o=t.length;s<o;s++){var h=t[s];if(r){var c=void 0!==h.POSITION?a.getDependency("accessor",h.POSITION):e.attributes.position;i.push(c)}n&&(c=void 0!==h.NORMAL?a.getDependency("accessor",h.NORMAL):e.attributes.normal,l.push(c))}return Promise.all([Promise.all(i),Promise.all(l)]).then((function(t){var a=t[0],s=t[1];return r&&(e.morphAttributes.position=a),n&&(e.morphAttributes.normal=s),e.morphTargetsRelative=!0,e}))}(e,t.targets,a):e}))}function z(e,t){var a=e.getIndex();if(null===a){var n=[],s=e.getAttribute("position");if(void 0===s)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var o=0;o<s.count;o++)n.push(o);e.setIndex(n),a=e.getIndex()}var i=a.count-2,l=[];if(t===r.TriangleFanDrawMode)for(o=1;o<=i;o++)l.push(a.getX(0)),l.push(a.getX(o)),l.push(a.getX(o+1));else for(o=0;o<i;o++)o%2==0?(l.push(a.getX(o)),l.push(a.getX(o+1)),l.push(a.getX(o+2))):(l.push(a.getX(o+2)),l.push(a.getX(o+1)),l.push(a.getX(o)));l.length/3!==i&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var h=e.clone();return h.setIndex(l),h}return k.prototype.parse=function(e,t){var a=this,r=this.json,n=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var s={scene:t[0][r.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:r.asset,parser:a,userData:{}};D(n,s,r),O(s,r),e(s)})).catch(t)},k.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],a=this.json.meshes||[],r={},n={},s=0,o=t.length;s<o;s++)for(var i=t[s].joints,l=0,h=i.length;l<h;l++)e[i[l]].isBone=!0;for(var c=0,d=e.length;c<d;c++){var u=e[c];void 0!==u.mesh&&(void 0===r[u.mesh]&&(r[u.mesh]=n[u.mesh]=0),r[u.mesh]++,void 0!==u.skin&&(a[u.mesh].isSkinnedMesh=!0))}this.json.meshReferences=r,this.json.meshUses=n},k.prototype.getDependency=function(e,t){var r=e+":"+t,n=this.cache.get(r);if(!n){switch(e){case"scene":n=this.loadScene(t);break;case"node":n=this.loadNode(t);break;case"mesh":n=this.loadMesh(t);break;case"accessor":n=this.loadAccessor(t);break;case"bufferView":n=this.loadBufferView(t);break;case"buffer":n=this.loadBuffer(t);break;case"material":n=this.loadMaterial(t);break;case"texture":n=this.loadTexture(t);break;case"skin":n=this.loadSkin(t);break;case"animation":n=this.loadAnimation(t);break;case"camera":n=this.loadCamera(t);break;case"light":n=this.extensions[a.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(r,n)}return n},k.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var a=this,r=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(r.map((function(t,r){return a.getDependency(e,r)}))),this.cache.add(e,t)}return t},k.prototype.loadBuffer=function(e){var t=this.json.buffers[e],r=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[a.KHR_BINARY_GLTF].body);var n=this.options;return new Promise((function(e,a){r.load(I(t.uri,n.path),e,void 0,(function(){a(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},k.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var a=t.byteLength||0,r=t.byteOffset||0;return e.slice(r,r+a)}))},k.prototype.loadAccessor=function(e){var t=this,a=this.json,n=this.json.accessors[e];if(void 0===n.bufferView&&void 0===n.sparse)return Promise.resolve(null);var s=[];return void 0!==n.bufferView?s.push(this.getDependency("bufferView",n.bufferView)):s.push(null),void 0!==n.sparse&&(s.push(this.getDependency("bufferView",n.sparse.indices.bufferView)),s.push(this.getDependency("bufferView",n.sparse.values.bufferView))),Promise.all(s).then((function(e){var s,o,i=e[0],l=A[n.type],h=T[n.componentType],c=h.BYTES_PER_ELEMENT,d=c*l,u=n.byteOffset||0,m=void 0!==n.bufferView?a.bufferViews[n.bufferView].byteStride:void 0,p=!0===n.normalized;if(m&&m!==d){var g=Math.floor(u/m),f="InterleavedBuffer:"+n.bufferView+":"+n.componentType+":"+g+":"+n.count,v=t.cache.get(f);v||(s=new h(i,g*m,n.count*m/c),v=new r.InterleavedBuffer(s,m/c),t.cache.add(f,v)),o=new r.InterleavedBufferAttribute(v,l,u%m/c,p)}else s=null===i?new h(n.count*l):new h(i,u,n.count*l),o=new r.BufferAttribute(s,l,p);if(void 0!==n.sparse){var b=A.SCALAR,y=T[n.sparse.indices.componentType],w=n.sparse.indices.byteOffset||0,L=n.sparse.values.byteOffset||0,M=new y(e[1],w,n.sparse.count*b),x=new h(e[2],L,n.sparse.count*l);null!==i&&(o=new r.BufferAttribute(o.array.slice(),o.itemSize,o.normalized));for(var E=0,R=M.length;E<R;E++){var S=M[E];if(o.setX(S,x[E*l]),l>=2&&o.setY(S,x[E*l+1]),l>=3&&o.setZ(S,x[E*l+2]),l>=4&&o.setW(S,x[E*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return o}))},k.prototype.loadTexture=function(e){var t,n=this,s=this.json,o=this.options,i=this.textureLoader,l=self.URL||self.webkitURL,h=s.textures[e],c=h.extensions||{},d=(t=c[a.MSFT_TEXTURE_DDS]?s.images[c[a.MSFT_TEXTURE_DDS].source]:s.images[h.source]).uri,u=!1;return void 0!==t.bufferView&&(d=n.getDependency("bufferView",t.bufferView).then((function(e){u=!0;var a=new Blob([e],{type:t.mimeType});return d=l.createObjectURL(a)}))),Promise.resolve(d).then((function(e){var t=o.manager.getHandler(e);return t||(t=c[a.MSFT_TEXTURE_DDS]?n.extensions[a.MSFT_TEXTURE_DDS].ddsLoader:i),new Promise((function(a,r){t.load(I(e,o.path),a,void 0,r)}))})).then((function(e){!0===u&&l.revokeObjectURL(d),e.flipY=!1,h.name&&(e.name=h.name),t.mimeType in U&&(e.format=U[t.mimeType]);var a=(s.samplers||{})[h.sampler]||{};return e.magFilter=R[a.magFilter]||r.LinearFilter,e.minFilter=R[a.minFilter]||r.LinearMipmapLinearFilter,e.wrapS=S[a.wrapS]||r.RepeatWrapping,e.wrapT=S[a.wrapT]||r.RepeatWrapping,e}))},k.prototype.assignTexture=function(e,t,n){var s=this;return this.getDependency("texture",n.index).then((function(o){if(!o.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":o.format=r.RGBFormat}if(void 0===n.texCoord||0==n.texCoord||"aoMap"===t&&1==n.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+n.texCoord+" for texture "+t+" not yet supported."),s.extensions[a.KHR_TEXTURE_TRANSFORM]){var i=void 0!==n.extensions?n.extensions[a.KHR_TEXTURE_TRANSFORM]:void 0;i&&(o=s.extensions[a.KHR_TEXTURE_TRANSFORM].extendTexture(o,i))}e[t]=o}))},k.prototype.assignFinalMaterial=function(e){var t=e.geometry,a=e.material,n=void 0!==t.attributes.tangent,s=void 0!==t.attributes.color,o=void 0===t.attributes.normal,i=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,h=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var c="PointsMaterial:"+a.uuid,d=this.cache.get(c);d||(d=new r.PointsMaterial,r.Material.prototype.copy.call(d,a),d.color.copy(a.color),d.map=a.map,d.sizeAttenuation=!1,this.cache.add(c,d)),a=d}else if(e.isLine){c="LineBasicMaterial:"+a.uuid;var u=this.cache.get(c);u||(u=new r.LineBasicMaterial,r.Material.prototype.copy.call(u,a),u.color.copy(a.color),this.cache.add(c,u)),a=u}if(n||s||o||i||l){c="ClonedMaterial:"+a.uuid+":";a.isGLTFSpecularGlossinessMaterial&&(c+="specular-glossiness:"),i&&(c+="skinning:"),n&&(c+="vertex-tangents:"),s&&(c+="vertex-colors:"),o&&(c+="flat-shading:"),l&&(c+="morph-targets:"),h&&(c+="morph-normals:");var m=this.cache.get(c);m||(m=a.clone(),i&&(m.skinning=!0),n&&(m.vertexTangents=!0),s&&(m.vertexColors=!0),o&&(m.flatShading=!0),l&&(m.morphTargets=!0),h&&(m.morphNormals=!0),this.cache.add(c,m)),a=m}a.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),a.normalScale&&!n&&(a.normalScale.y=-a.normalScale.y),a.clearcoatNormalScale&&!n&&(a.clearcoatNormalScale.y=-a.clearcoatNormalScale.y),e.material=a},k.prototype.loadMaterial=function(e){var t,n=this,s=this.json,o=this.extensions,i=s.materials[e],l={},h=i.extensions||{},c=[];if(h[a.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var d=o[a.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=d.getMaterialType(),c.push(d.extendParams(l,i,n))}else if(h[a.KHR_MATERIALS_UNLIT]){var u=o[a.KHR_MATERIALS_UNLIT];t=u.getMaterialType(),c.push(u.extendParams(l,i,n))}else{t=r.MeshStandardMaterial;var m=i.pbrMetallicRoughness||{};if(l.color=new r.Color(1,1,1),l.opacity=1,Array.isArray(m.baseColorFactor)){var g=m.baseColorFactor;l.color.fromArray(g),l.opacity=g[3]}void 0!==m.baseColorTexture&&c.push(n.assignTexture(l,"map",m.baseColorTexture)),l.metalness=void 0!==m.metallicFactor?m.metallicFactor:1,l.roughness=void 0!==m.roughnessFactor?m.roughnessFactor:1,void 0!==m.metallicRoughnessTexture&&(c.push(n.assignTexture(l,"metalnessMap",m.metallicRoughnessTexture)),c.push(n.assignTexture(l,"roughnessMap",m.metallicRoughnessTexture)))}!0===i.doubleSided&&(l.side=r.DoubleSide);var f=i.alphaMode||_;if(f===H?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,f===F&&(l.alphaTest=void 0!==i.alphaCutoff?i.alphaCutoff:.5)),void 0!==i.normalTexture&&t!==r.MeshBasicMaterial&&(c.push(n.assignTexture(l,"normalMap",i.normalTexture)),l.normalScale=new r.Vector2(1,1),void 0!==i.normalTexture.scale&&l.normalScale.set(i.normalTexture.scale,i.normalTexture.scale)),void 0!==i.occlusionTexture&&t!==r.MeshBasicMaterial&&(c.push(n.assignTexture(l,"aoMap",i.occlusionTexture)),void 0!==i.occlusionTexture.strength&&(l.aoMapIntensity=i.occlusionTexture.strength)),void 0!==i.emissiveFactor&&t!==r.MeshBasicMaterial&&(l.emissive=(new r.Color).fromArray(i.emissiveFactor)),void 0!==i.emissiveTexture&&t!==r.MeshBasicMaterial&&c.push(n.assignTexture(l,"emissiveMap",i.emissiveTexture)),h[a.KHR_MATERIALS_CLEARCOAT]){var v=o[a.KHR_MATERIALS_CLEARCOAT];t=v.getMaterialType(),c.push(v.extendParams(l,{extensions:h},n))}return Promise.all(c).then((function(){var e;return e=t===p?o[a.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),i.name&&(e.name=i.name),e.map&&(e.map.encoding=r.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=r.sRGBEncoding),O(e,i),i.extensions&&D(o,e,i),e}))},k.prototype.loadGeometries=function(e){var t=this,n=this.extensions,s=this.primitiveCache;function o(e){return n[a.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(a){return N(a,e,t)}))}for(var i,l,h=[],c=0,d=e.length;c<d;c++){var u,m=e[c],p=(l=void 0,(l=(i=m).extensions&&i.extensions[a.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+B(l.attributes):i.indices+":"+B(i.attributes)+":"+i.mode),g=s[p];if(g)h.push(g.promise);else u=m.extensions&&m.extensions[a.KHR_DRACO_MESH_COMPRESSION]?o(m):N(new r.BufferGeometry,m,t),s[p]={primitive:m,promise:u},h.push(u)}return Promise.all(h)},k.prototype.loadMesh=function(e){for(var t,a=this,n=this.json.meshes[e],s=n.primitives,o=[],i=0,l=s.length;i<l;i++){var h=void 0===s[i].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new r.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:r.FrontSide})),t.DefaultMaterial):this.getDependency("material",s[i].material);o.push(h)}return o.push(a.loadGeometries(s)),Promise.all(o).then((function(t){for(var o=t.slice(0,t.length-1),i=t[t.length-1],l=[],h=0,c=i.length;h<c;h++){var d,u=i[h],m=s[h],p=o[h];if(m.mode===M||m.mode===x||m.mode===E||void 0===m.mode)!0!==(d=!0===n.isSkinnedMesh?new r.SkinnedMesh(u,p):new r.Mesh(u,p)).isSkinnedMesh||d.geometry.attributes.skinWeight.normalized||d.normalizeSkinWeights(),m.mode===x?d.geometry=z(d.geometry,r.TriangleStripDrawMode):m.mode===E&&(d.geometry=z(d.geometry,r.TriangleFanDrawMode));else if(m.mode===y)d=new r.LineSegments(u,p);else if(m.mode===L)d=new r.Line(u,p);else if(m.mode===w)d=new r.LineLoop(u,p);else{if(m.mode!==b)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+m.mode);d=new r.Points(u,p)}Object.keys(d.geometry.morphAttributes).length>0&&G(d,n),d.name=n.name||"mesh_"+e,i.length>1&&(d.name+="_"+h),O(d,n),a.assignFinalMaterial(d),l.push(d)}if(1===l.length)return l[0];var g=new r.Group;for(h=0,c=l.length;h<c;h++)g.add(l[h]);return g}))},k.prototype.loadCamera=function(e){var t,a=this.json.cameras[e],n=a[a.type];if(n)return"perspective"===a.type?t=new r.PerspectiveCamera(r.MathUtils.radToDeg(n.yfov),n.aspectRatio||1,n.znear||1,n.zfar||2e6):"orthographic"===a.type&&(t=new r.OrthographicCamera(-n.xmag,n.xmag,n.ymag,-n.ymag,n.znear,n.zfar)),a.name&&(t.name=a.name),O(t,a),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},k.prototype.loadSkin=function(e){var t=this.json.skins[e],a={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(a):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return a.inverseBindMatrices=e,a}))},k.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],a=[],n=[],s=[],o=[],i=[],l=0,h=t.channels.length;l<h;l++){var c=t.channels[l],d=t.samplers[c.sampler],u=c.target,m=void 0!==u.node?u.node:u.id,p=void 0!==t.parameters?t.parameters[d.input]:d.input,g=void 0!==t.parameters?t.parameters[d.output]:d.output;a.push(this.getDependency("node",m)),n.push(this.getDependency("accessor",p)),s.push(this.getDependency("accessor",g)),o.push(d),i.push(u)}return Promise.all([Promise.all(a),Promise.all(n),Promise.all(s),Promise.all(o),Promise.all(i)]).then((function(a){for(var n=a[0],s=a[1],o=a[2],i=a[3],l=a[4],h=[],c=0,d=n.length;c<d;c++){var u=n[c],m=s[c],p=o[c],g=i[c],f=l[c];if(void 0!==u){var b;switch(u.updateMatrix(),u.matrixAutoUpdate=!0,j[f.path]){case j.weights:b=r.NumberKeyframeTrack;break;case j.rotation:b=r.QuaternionKeyframeTrack;break;case j.position:case j.scale:default:b=r.VectorKeyframeTrack}var y=u.name?u.name:u.uuid,w=void 0!==g.interpolation?P[g.interpolation]:r.InterpolateLinear,L=[];j[f.path]===j.weights?u.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&L.push(e.name?e.name:e.uuid)})):L.push(y);var M=p.array;if(p.normalized){var x;if(M.constructor===Int8Array)x=1/127;else if(M.constructor===Uint8Array)x=1/255;else if(M.constructor==Int16Array)x=1/32767;else{if(M.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");x=1/65535}for(var E=new Float32Array(M.length),T=0,R=M.length;T<R;T++)E[T]=M[T]*x;M=E}for(T=0,R=L.length;T<R;T++){var S=new b(L[T]+"."+j[f.path],m.array,M,w);"CUBICSPLINE"===g.interpolation&&(S.createInterpolant=function(e){return new v(this.times,this.values,this.getValueSize()/3,e)},S.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),h.push(S)}}}var A=t.name?t.name:"animation_"+e;return new r.AnimationClip(A,void 0,h)}))},k.prototype.loadNode=function(e){var t,n=this.json,s=this.extensions,o=this,i=n.meshReferences,l=n.meshUses,h=n.nodes[e];return(t=[],void 0!==h.mesh&&t.push(o.getDependency("mesh",h.mesh).then((function(e){var t;if(i[h.mesh]>1){var a=l[h.mesh]++;(t=e.clone()).name+="_instance_"+a}else t=e;return void 0!==h.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,a=h.weights.length;t<a;t++)e.morphTargetInfluences[t]=h.weights[t]})),t}))),void 0!==h.camera&&t.push(o.getDependency("camera",h.camera)),h.extensions&&h.extensions[a.KHR_LIGHTS_PUNCTUAL]&&void 0!==h.extensions[a.KHR_LIGHTS_PUNCTUAL].light&&t.push(o.getDependency("light",h.extensions[a.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===h.isBone?new r.Bone:e.length>1?new r.Group:1===e.length?e[0]:new r.Object3D)!==e[0])for(var a=0,n=e.length;a<n;a++)t.add(e[a]);if(h.name&&(t.userData.name=h.name,t.name=r.PropertyBinding.sanitizeNodeName(h.name)),O(t,h),h.extensions&&D(s,t,h),void 0!==h.matrix){var o=new r.Matrix4;o.fromArray(h.matrix),t.applyMatrix4(o)}else void 0!==h.translation&&t.position.fromArray(h.translation),void 0!==h.rotation&&t.quaternion.fromArray(h.rotation),void 0!==h.scale&&t.scale.fromArray(h.scale);return t}))},k.prototype.loadScene=function(){function e(t,a,n,s){var o=n.nodes[t];return s.getDependency("node",t).then((function(e){return void 0===o.skin?e:s.getDependency("skin",o.skin).then((function(e){for(var a=[],r=0,n=(t=e).joints.length;r<n;r++)a.push(s.getDependency("node",t.joints[r]));return Promise.all(a)})).then((function(a){return e.traverse((function(e){if(e.isMesh){for(var n=[],s=[],o=0,i=a.length;o<i;o++){var l=a[o];if(l){n.push(l);var h=new r.Matrix4;void 0!==t.inverseBindMatrices&&h.fromArray(t.inverseBindMatrices.array,16*o),s.push(h)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[o])}e.bind(new r.Skeleton(n,s),e.matrixWorld)}})),e}));var t})).then((function(t){a.add(t);var r=[];if(o.children)for(var i=o.children,l=0,h=i.length;l<h;l++){var c=i[l];r.push(e(c,t,n,s))}return Promise.all(r)}))}return function(t){var a=this.json,n=this.extensions,s=this.json.scenes[t],o=new r.Group;s.name&&(o.name=s.name),O(o,s),s.extensions&&D(n,o,s);for(var i=s.nodes||[],l=[],h=0,c=i.length;h<c;h++)l.push(e(i[h],o,a,this));return Promise.all(l).then((function(){return o}))}}(),e}()},"./src/js/app/main.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>v});var r=a("./node_modules/three/build/three.module.js"),n=a("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),s=a("./src/js/app/components/renderer.js"),o=a("./src/js/app/components/camera.js"),i=a("./src/js/app/components/light.js"),l=a("./src/js/app/components/controls.js"),h=a("./src/js/app/components/geometry.js"),c=a("./src/js/app/helpers/stats.js"),d=a("./src/js/app/helpers/meshHelper.js"),u=a("./src/js/app/model/texture.js"),m=a("./src/js/app/model/model.js"),p=a("./src/js/app/managers/interaction.js"),g=a("./src/js/app/managers/datGUI.js"),f=a("./src/js/data/config.js");class v{constructor(e){this.container=e,this.clock=new r.Clock,this.scene=new r.Scene,this.scene.fog=new r.FogExp2(f.default.fog.color,f.default.fog.near),window.devicePixelRatio&&(f.default.dpr=window.devicePixelRatio),this.renderer=new s.default(this.scene,e),this.camera=new o.default(this.renderer.threeRenderer),this.controls=new l.default(this.camera.threeCamera,e),this.light=new i.default(this.scene);["ambient","directional","point","hemi"].forEach((e=>this.light.place(e))),this.geometry=new h.default(this.scene),this.geometry.make("plane")(150,150,10,10),this.geometry.place([0,-20,0],[Math.PI/2,0,0]),f.default.isDev&&f.default.isShowingStats&&(this.stats=new c.default(this.renderer),this.stats.setUp()),f.default.isDev&&(this.gui=new g.default(this)),this.texture=new u.default,this.texture.load().then((()=>{this.manager=new r.LoadingManager,this.model=new m.default(this.scene,this.manager,this.texture.textures),this.model.load(f.default.models[f.default.model.selected].type),this.manager.onProgress=(e,t,a)=>{console.log(`${e}: ${t} ${a}`)},this.manager.onLoad=()=>{new p.default(this.renderer.threeRenderer,this.scene,this.camera.threeCamera,this.controls.threeControls),f.default.isDev&&(this.meshHelper=new d.default(this.scene,this.model.obj),f.default.mesh.enableHelper&&this.meshHelper.enable(),this.gui.load(this,this.model.obj)),f.default.isLoaded=!0,this.container.querySelector("#loading").style.display="none"}})),this.render()}render(){f.default.isDev&&f.default.isShowingStats&&c.default.start(),this.renderer.render(this.scene,this.camera.threeCamera),f.default.isDev&&f.default.isShowingStats&&c.default.end(),n.default.update(),this.controls.threeControls.update(),requestAnimationFrame(this.render.bind(this))}}},"./src/js/app/managers/datGUI.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>n});var r=a("./src/js/data/config.js");class n{constructor(e){this.gui=new dat.GUI,this.camera=e.camera.threeCamera,this.controls=e.controls.threeControls,this.light=e.light,this.scene=e.scene,this.model=null,this.meshHelper=null}load(e,t){this.model=e.model,this.meshHelper=e.meshHelper;const a=this.gui.addFolder("Camera"),n=a.add(r.default.camera,"fov",0,180).name("Camera FOV");n.onChange((e=>{this.controls.enableRotate=!1,this.camera.fov=e})),n.onFinishChange((()=>{this.camera.updateProjectionMatrix(),this.controls.enableRotate=!0}));const s=a.add(r.default.camera,"aspect",0,4).name("Camera Aspect");s.onChange((e=>{this.controls.enableRotate=!1,this.camera.aspect=e})),s.onFinishChange((()=>{this.camera.updateProjectionMatrix(),this.controls.enableRotate=!0}));a.addColor(r.default.fog,"color").name("Fog Color").onChange((e=>{this.scene.fog.color.setHex(e)}));const o=a.add(r.default.fog,"near",0,.01).name("Fog Near");o.onChange((e=>{this.controls.enableRotate=!1,this.scene.fog.density=e})),o.onFinishChange((()=>{this.controls.enableRotate=!0}));const i=this.gui.addFolder("Controls");i.add(r.default.controls,"autoRotate").name("Auto Rotate").onChange((e=>{this.controls.autoRotate=e}));const l=i.add(r.default.controls,"autoRotateSpeed",-1,1).name("Rotation Speed");l.onChange((e=>{this.controls.enableRotate=!1,this.controls.autoRotateSpeed=e})),l.onFinishChange((()=>{this.controls.enableRotate=!0}));this.gui.addFolder("Model").add(r.default.model,"type",[...r.default.model.initialTypes]).name("Select Model").onChange((e=>{e&&(r.default.mesh.enableHelper&&this.meshHelper.disable(),r.default.model.selected=r.default.model.initialTypes.indexOf(e),this.unload(),this.model.unload(),this.model.load(e))}));const h=this.gui.addFolder("Mesh");h.add(r.default.mesh,"enableHelper",!0).name("Enable Helpers").onChange((e=>{e?this.meshHelper.enable():this.meshHelper.disable()})),h.add(r.default.mesh,"translucent",!0).name("Translucent").onChange((e=>{e?(t.material.transparent=!0,t.material.opacity=.5):t.material.opacity=1})),h.add(r.default.mesh,"wireframe",!0).name("Wireframe").onChange((e=>{t.material.wireframe=e}));const c=this.gui.addFolder("Ambient Light");c.add(r.default.ambientLight,"enabled").name("Enabled").onChange((e=>{this.light.ambientLight.visible=e})),c.addColor(r.default.ambientLight,"color").name("Color").onChange((e=>{this.light.ambientLight.color.setHex(e)}));const d=this.gui.addFolder("Directional Light");d.add(r.default.directionalLight,"enabled").name("Enabled").onChange((e=>{this.light.directionalLight.visible=e})),d.addColor(r.default.directionalLight,"color").name("Color").onChange((e=>{this.light.directionalLight.color.setHex(e)}));const u=d.add(r.default.directionalLight,"intensity",0,2).name("Intensity");u.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.intensity=e})),u.onFinishChange((()=>{this.controls.enableRotate=!0}));const m=d.add(r.default.directionalLight,"x",-1e3,1e3).name("Position X");m.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.position.x=e})),m.onFinishChange((()=>{this.controls.enableRotate=!0}));const p=d.add(r.default.directionalLight,"y",-1e3,1e3).name("Position Y");p.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.position.y=e})),p.onFinishChange((()=>{this.controls.enableRotate=!0}));const g=d.add(r.default.directionalLight,"z",-1e3,1e3).name("Position Z");g.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.position.z=e})),g.onFinishChange((()=>{this.controls.enableRotate=!0}));const f=this.gui.addFolder("Shadow Map");f.add(r.default.shadow,"enabled").name("Enabled").onChange((e=>{this.light.directionalLight.castShadow=e})),f.add(r.default.shadow,"helperEnabled").name("Helper Enabled").onChange((e=>{this.light.directionalLightHelper.visible=e}));const v=f.add(r.default.shadow,"near",0,400).name("Near");v.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.shadow.camera.near=e})),v.onFinishChange((()=>{this.controls.enableRotate=!0,this.light.directionalLight.shadow.map.dispose(),this.light.directionalLight.shadow.map=null,this.light.directionalLightHelper.update()}));const b=f.add(r.default.shadow,"far",0,1200).name("Far");b.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.shadow.camera.far=e})),b.onFinishChange((()=>{this.controls.enableRotate=!0,this.light.directionalLight.shadow.map.dispose(),this.light.directionalLight.shadow.map=null,this.light.directionalLightHelper.update()}));const y=f.add(r.default.shadow,"top",-400,400).name("Top");y.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.shadow.camera.top=e})),y.onFinishChange((()=>{this.controls.enableRotate=!0,this.light.directionalLight.shadow.map.dispose(),this.light.directionalLight.shadow.map=null,this.light.directionalLightHelper.update()}));const w=f.add(r.default.shadow,"right",-400,400).name("Right");w.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.shadow.camera.right=e})),w.onFinishChange((()=>{this.controls.enableRotate=!0,this.light.directionalLight.shadow.map.dispose(),this.light.directionalLight.shadow.map=null,this.light.directionalLightHelper.update()}));const L=f.add(r.default.shadow,"bottom",-400,400).name("Bottom");L.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.shadow.camera.bottom=e})),L.onFinishChange((()=>{this.controls.enableRotate=!0,this.light.directionalLight.shadow.map.dispose(),this.light.directionalLight.shadow.map=null,this.light.directionalLightHelper.update()}));const M=f.add(r.default.shadow,"left",-400,400).name("Left");M.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.shadow.camera.left=e})),M.onFinishChange((()=>{this.controls.enableRotate=!0,this.light.directionalLight.shadow.map.dispose(),this.light.directionalLight.shadow.map=null,this.light.directionalLightHelper.update()}));const x=f.add(r.default.shadow,"bias",-1e-5,1).name("Bias");x.onChange((e=>{this.controls.enableRotate=!1,this.light.directionalLight.shadow.bias=e})),x.onFinishChange((()=>{this.controls.enableRotate=!0,this.light.directionalLight.shadow.map.dispose(),this.light.directionalLight.shadow.map=null,this.light.directionalLightHelper.update()}));const E=this.gui.addFolder("Point Light");E.add(r.default.pointLight,"enabled").name("Enabled").onChange((e=>{this.light.pointLight.visible=e})),E.addColor(r.default.pointLight,"color").name("Color").onChange((e=>{this.light.pointLight.color.setHex(e)}));const T=E.add(r.default.pointLight,"intensity",0,2).name("Intensity");T.onChange((e=>{this.controls.enableRotate=!1,this.light.pointLight.intensity=e})),T.onFinishChange((()=>{this.controls.enableRotate=!0}));const R=E.add(r.default.pointLight,"distance",0,1e3).name("Distance");R.onChange((e=>{this.controls.enableRotate=!1,this.light.pointLight.distance=e})),R.onFinishChange((()=>{this.controls.enableRotate=!0}));const S=E.add(r.default.pointLight,"x",-1e3,1e3).name("Position X");S.onChange((e=>{this.controls.enableRotate=!1,this.light.pointLight.position.x=e})),S.onFinishChange((()=>{this.controls.enableRotate=!0}));const A=E.add(r.default.pointLight,"y",-1e3,1e3).name("Position Y");A.onChange((e=>{this.controls.enableRotate=!1,this.light.pointLight.position.y=e})),A.onFinishChange((()=>{this.controls.enableRotate=!0}));const C=E.add(r.default.pointLight,"z",-1e3,1e3).name("Position Z");C.onChange((e=>{this.controls.enableRotate=!1,this.light.pointLight.position.z=e})),C.onFinishChange((()=>{this.controls.enableRotate=!0}));const j=this.gui.addFolder("Hemi Light");j.add(r.default.hemiLight,"enabled").name("Enabled").onChange((e=>{this.light.hemiLight.visible=e})),j.addColor(r.default.hemiLight,"color").name("Color").onChange((e=>{this.light.hemiLight.color.setHex(e)})),j.addColor(r.default.hemiLight,"groundColor").name("ground Color").onChange((e=>{this.light.hemiLight.groundColor.setHex(e)}));const P=j.add(r.default.hemiLight,"intensity",0,2).name("Intensity");P.onChange((e=>{this.controls.enableRotate=!1,this.light.hemiLight.intensity=e})),P.onFinishChange((()=>{this.controls.enableRotate=!0}));const _=j.add(r.default.hemiLight,"x",-1e3,1e3).name("Position X");_.onChange((e=>{this.controls.enableRotate=!1,this.light.hemiLight.position.x=e})),_.onFinishChange((()=>{this.controls.enableRotate=!0}));const F=j.add(r.default.hemiLight,"y",-500,1e3).name("Position Y");F.onChange((e=>{this.controls.enableRotate=!1,this.light.hemiLight.position.y=e})),F.onFinishChange((()=>{this.controls.enableRotate=!0}));const H=j.add(r.default.hemiLight,"z",-1e3,1e3).name("Position Z");H.onChange((e=>{this.controls.enableRotate=!1,this.light.hemiLight.position.z=e})),H.onFinishChange((()=>{this.controls.enableRotate=!0}))}unload(){this.gui.destroy(),this.gui=new dat.GUI}}},"./src/js/app/managers/interaction.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>o});var r=a("./src/js/utils/keyboard.js"),n=a("./src/js/utils/helpers.js"),s=a("./src/js/data/config.js");class o{constructor(e,t,a,s){this.renderer=e,this.scene=t,this.camera=a,this.controls=s,this.timeout=null,this.keyboard=new r.default,this.renderer.domElement.addEventListener("mousemove",(e=>n.default.throttle(this.onMouseMove(e),250)),!1),this.renderer.domElement.addEventListener("mouseleave",(e=>this.onMouseLeave(e)),!1),this.renderer.domElement.addEventListener("mouseover",(e=>this.onMouseOver(e)),!1),this.keyboard.domElement.addEventListener("keydown",(e=>{e.repeat||this.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed")}))}onMouseOver(e){e.preventDefault(),s.default.isMouseOver=!0}onMouseLeave(e){e.preventDefault(),s.default.isMouseOver=!1}onMouseMove(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){s.default.isMouseMoving=!1}),200),s.default.isMouseMoving=!0}}},"./src/js/app/model/model.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>h});var r=a("./node_modules/three/build/three.module.js"),n=a("./src/js/app/components/material.js"),s=a("./src/js/utils/helpers.js"),o=a("./src/js/utils/bufferGeometryUtils.js"),i=a("./src/js/app/loaders/GLTFLoader.js"),l=a("./src/js/data/config.js");class h{constructor(e,t,a){this.scene=e,this.textures=a,this.manager=t,this.obj=null,this.ref=null}load(e){switch(e){case"gltf":new i.GLTFLoader(this.manager).load(l.default.models[l.default.model.selected].path,(e=>{const t=e.scene;let a;l.default.shadow.enabled&&t.traverse((function(e){(e.isMesh||e.isLight)&&(e.castShadow=!0),e.isMesh&&(e.material.wireframe=l.default.mesh.wireframe,a=e)})),this.obj=a,o.BufferGeometryUtils.computeTangents(a.geometry);var n=new r.Group;n.scale.multiplyScalar(.25),this.scene.add(n),this.ref=n,n.updateMatrixWorld(!0),n.add(a),this.scene.add(t)}),s.default.logProgress(),s.default.logError());break;case"object":new r.ObjectLoader(this.manager).load(l.default.models[l.default.model.selected].path,(e=>{e.traverse((e=>{if(e instanceof r.Mesh){const t=new n.default(16777215).standard;t.map=this.textures.UV,e.material=t,l.default.shadow.enabled&&(e.receiveShadow=!0,e.castShadow=!0)}})),this.obj=e,this.ref=e,e.scale.multiplyScalar(l.default.models[l.default.model.selected].scale),this.scene.add(e)}),s.default.logProgress(),s.default.logError())}}unload(){this.scene.remove(this.ref)}}},"./src/js/app/model/texture.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>i});var r=a("./node_modules/three/build/three.module.js"),n=a("./node_modules/es6-promise/dist/es6-promise.js"),s=a("./src/js/utils/helpers.js"),o=a("./src/js/data/config.js");class i{constructor(){this.textures={}}load(){const e=new r.TextureLoader,t=o.default.maxAnisotropy,a=o.default.texture.imageFiles,i=[];return e.setPath(o.default.texture.path),a.forEach((a=>{i.push(new n.Promise(((n,o)=>{e.load(a.image,(e=>{e.anisotropy=t;const s={};s[a.name]=e,s[a.name]instanceof r.Texture&&n(s)}),s.default.logProgress(),(e=>o(new Error(e+"An error occurred loading while loading "+a.image))))})))})),n.Promise.all(i).then((e=>{for(let t=0;t<e.length;t++)this.textures[Object.keys(e[t])[0]]=e[t][Object.keys(e[t])[0]]}),(e=>console.log(e)))}}},"./src/js/data/config.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>r});const r={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:a("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,model:{selected:0,initialTypes:["gltf","object"],type:"gltf"},models:[{path:"./assets/models/duck.gltf",scale:20,type:"gltf"},{path:"./assets/models/Teapot.json",scale:20,type:"object"}],texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!0,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:40,near:2,far:1e3,aspect:1,posX:0,posY:30,posZ:40},controls:{autoRotate:!0,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/bufferGeometryUtils.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{BufferGeometryUtils:()=>n});var r=a("./node_modules/three/build/three.module.js"),n={computeTangents:function(e){var t=e.index,a=e.attributes;if(null!==t&&void 0!==a.position&&void 0!==a.normal&&void 0!==a.uv){var n=t.array,s=a.position.array,o=a.normal.array,i=a.uv.array,l=s.length/3;void 0===a.tangent&&e.setAttribute("tangent",new r.BufferAttribute(new Float32Array(4*l),4));for(var h=a.tangent.array,c=[],d=[],u=0;u<l;u++)c[u]=new r.Vector3,d[u]=new r.Vector3;var m=new r.Vector3,p=new r.Vector3,g=new r.Vector3,f=new r.Vector2,v=new r.Vector2,b=new r.Vector2,y=new r.Vector3,w=new r.Vector3,L=e.groups;0===L.length&&(L=[{start:0,count:n.length}]);u=0;for(var M=L.length;u<M;++u)for(var x=F=(_=L[u]).start,E=F+_.count;x<E;x+=3)H(n[x+0],n[x+1],n[x+2]);var T,R,S,A=new r.Vector3,C=new r.Vector3,j=new r.Vector3,P=new r.Vector3;for(u=0,M=L.length;u<M;++u){var _,F;for(x=F=(_=L[u]).start,E=F+_.count;x<E;x+=3)U(n[x+0]),U(n[x+1]),U(n[x+2])}}else console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");function H(e,t,a){m.fromArray(s,3*e),p.fromArray(s,3*t),g.fromArray(s,3*a),f.fromArray(i,2*e),v.fromArray(i,2*t),b.fromArray(i,2*a),p.sub(m),g.sub(m),v.sub(f),b.sub(f);var r=1/(v.x*b.y-b.x*v.y);isFinite(r)&&(y.copy(p).multiplyScalar(b.y).addScaledVector(g,-v.y).multiplyScalar(r),w.copy(g).multiplyScalar(v.x).addScaledVector(p,-b.x).multiplyScalar(r),c[e].add(y),c[t].add(y),c[a].add(y),d[e].add(w),d[t].add(w),d[a].add(w))}function U(e){j.fromArray(o,3*e),P.copy(j),R=c[e],A.copy(R),A.sub(j.multiplyScalar(j.dot(R))).normalize(),C.crossVectors(P,R),S=C.dot(d[e]),T=S<0?-1:1,h[4*e]=A.x,h[4*e+1]=A.y,h[4*e+2]=A.z,h[4*e+3]=T}},mergeBufferGeometries:function(e,t){for(var a=null!==e[0].index,n=new Set(Object.keys(e[0].attributes)),s=new Set(Object.keys(e[0].morphAttributes)),o={},i={},l=e[0].morphTargetsRelative,h=new r.BufferGeometry,c=0,d=0;d<e.length;++d){var u=e[d],m=0;if(a!==(null!==u.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var p in u.attributes){if(!n.has(p))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+'. All geometries must have compatible attributes; make sure "'+p+'" attribute exists among all geometries, or in none of them.'),null;void 0===o[p]&&(o[p]=[]),o[p].push(u.attributes[p]),m++}if(m!==n.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". Make sure all geometries have the same number of attributes."),null;if(l!==u.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var p in u.morphAttributes){if(!s.has(p))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===i[p]&&(i[p]=[]),i[p].push(u.morphAttributes[p])}if(h.userData.mergedUserData=h.userData.mergedUserData||[],h.userData.mergedUserData.push(u.userData),t){var g;if(a)g=u.index.count;else{if(void 0===u.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". The geometry must have either an index or a position attribute"),null;g=u.attributes.position.count}h.addGroup(c,g,d),c+=g}}if(a){var f=0,v=[];for(d=0;d<e.length;++d){for(var b=e[d].index,y=0;y<b.count;++y)v.push(b.getX(y)+f);f+=e[d].attributes.position.count}h.setIndex(v)}for(var p in o){var w=this.mergeBufferAttributes(o[p]);if(!w)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+p+" attribute."),null;h.setAttribute(p,w)}for(var p in i){var L=i[p][0].length;if(0===L)break;h.morphAttributes=h.morphAttributes||{},h.morphAttributes[p]=[];for(d=0;d<L;++d){var M=[];for(y=0;y<i[p].length;++y)M.push(i[p][y][d]);var x=this.mergeBufferAttributes(M);if(!x)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+p+" morphAttribute."),null;h.morphAttributes[p].push(x)}}return h},mergeBufferAttributes:function(e){for(var t,a,n,s=0,o=0;o<e.length;++o){var i=e[o];if(i.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=i.array.constructor),t!==i.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===a&&(a=i.itemSize),a!==i.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===n&&(n=i.normalized),n!==i.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;s+=i.array.length}var l=new t(s),h=0;for(o=0;o<e.length;++o)l.set(e[o].array,h),h+=e[o].array.length;return new r.BufferAttribute(l,a,n)},interleaveAttributes:function(e){for(var t,a=0,n=0,s=0,o=e.length;s<o;++s){var i=e[s];if(void 0===t&&(t=i.array.constructor),t!==i.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;a+=i.array.length,n+=i.itemSize}var l=new r.InterleavedBuffer(new t(a),n),h=0,c=[],d=["getX","getY","getZ","getW"],u=["setX","setY","setZ","setW"],m=0;for(o=e.length;m<o;m++){var p=(i=e[m]).itemSize,g=i.count,f=new r.InterleavedBufferAttribute(l,p,h,i.normalized);c.push(f),h+=p;for(var v=0;v<g;v++)for(var b=0;b<p;b++)f[u[b]](v,i[d[b]](v))}return c},estimateBytesUsed:function(e){var t=0;for(var a in e.attributes){var r=e.getAttribute(a);t+=r.count*r.itemSize*r.array.BYTES_PER_ELEMENT}var n=e.getIndex();return t+=n?n.count*n.itemSize*n.array.BYTES_PER_ELEMENT:0},mergeVertices:function(e,t=1e-4){t=Math.max(t,Number.EPSILON);for(var a={},n=e.getIndex(),s=e.getAttribute("position"),o=n?n.count:s.count,i=0,l=Object.keys(e.attributes),h={},c={},d=[],u=["getX","getY","getZ","getW"],m=0,p=l.length;m<p;m++){h[w=l[m]]=[],(E=e.morphAttributes[w])&&(c[w]=new Array(E.length).fill().map((()=>[])))}var g=Math.log10(1/t),f=Math.pow(10,g);for(m=0;m<o;m++){var v=n?n.getX(m):m,b="",y=0;for(p=l.length;y<p;y++)for(var w=l[y],L=(x=e.getAttribute(w)).itemSize,M=0;M<L;M++)b+=~~(x[u[M]](v)*f)+",";if(b in a)d.push(a[b]);else{for(y=0,p=l.length;y<p;y++){w=l[y];var x=e.getAttribute(w),E=e.morphAttributes[w],T=(L=x.itemSize,h[w]),R=c[w];for(M=0;M<L;M++){var S=u[M];if(T.push(x[S](v)),E)for(var A=0,C=E.length;A<C;A++)R[A].push(E[A][S](v))}}a[b]=i,d.push(i),i++}}const j=e.clone();for(m=0,p=l.length;m<p;m++){w=l[m];var P=e.getAttribute(w),_=new P.array.constructor(h[w]);x=new r.BufferAttribute(_,P.itemSize,P.normalized);if(j.setAttribute(w,x),w in c)for(y=0;y<c[w].length;y++){var F=e.morphAttributes[w][y],H=(_=new F.array.constructor(c[w][y]),new r.BufferAttribute(_,F.itemSize,F.normalized));j.morphAttributes[w][y]=H}}return j.setIndex(d),j},toTrianglesDrawMode:function(e,t){if(t===r.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===r.TriangleFanDrawMode||t===r.TriangleStripDrawMode){var a=e.getIndex();if(null===a){var n=[],s=e.getAttribute("position");if(void 0===s)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var o=0;o<s.count;o++)n.push(o);e.setIndex(n),a=e.getIndex()}var i=a.count-2,l=[];if(t===r.TriangleFanDrawMode)for(o=1;o<=i;o++)l.push(a.getX(0)),l.push(a.getX(o)),l.push(a.getX(o+1));else for(o=0;o<i;o++)o%2==0?(l.push(a.getX(o)),l.push(a.getX(o+1)),l.push(a.getX(o+2))):(l.push(a.getX(o+2)),l.push(a.getX(o+1)),l.push(a.getX(o)));l.length/3!==i&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var h=e.clone();return h.setIndex(l),h.clearGroups(),h}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}},"./src/js/utils/detector.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>r});const r={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,a,r;t=void 0!==(e=e||{}).parent?e.parent:document.body,a=void 0!==e.id?e.id:"oldie",(r=this.getWebGLErrorMessage()).id=a,t.appendChild(r)}}},"./src/js/utils/helpers.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>r});class r{static throttle(e,t,a){let r,n;return t||(t=250),function(){const s=a||this,o=+new Date,i=arguments;r&&o<r+t?(clearTimeout(n),n=setTimeout((function(){r=o,e.apply(s,i)}),t)):(r=o,e.apply(s,i))}}static logProgress(){return function(e){if(e.lengthComputable){const t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}static logError(){return function(e){console.error(e)}}static handleColorChange(e){return t=>{"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}static update(e){this.needsUpdate(e.material,e.geometry)}static needsUpdate(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}static updateTexture(e,t,a){return function(r){e[t]=a[r],e.needsUpdate=!0}}}},"./src/js/utils/keyboard.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>n});const r={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27};class n{constructor(e){this.domElement=e||document,this.keyCodes={},this.domElement.addEventListener("keydown",(e=>this.onKeyChange(e)),!1),this.domElement.addEventListener("keyup",(e=>this.onKeyChange(e)),!1),window.addEventListener("blur",(()=>this.onBlur),!1)}destroy(){this.domElement.removeEventListener("keydown",(e=>this.onKeyChange(e)),!1),this.domElement.removeEventListener("keyup",(e=>this.onKeyChange(e)),!1),window.removeEventListener("blur",(()=>this.onBlur),!1)}onBlur(){for(const e in this.keyCodes)this.keyCodes[e]=!1}onKeyChange(e){const t=e.keyCode;this.keyCodes[t]="keydown"===e.type}pressed(e){const t=e.split("+");for(let e=0;e<t.length;e++){const a=t[e];let n=!1;if(n=-1!=Object.keys(r).indexOf(a)?this.keyCodes[r[a]]:this.keyCodes[a.toUpperCase().charCodeAt(0)],!n)return!1}return!0}eventMatches(e,t){const a=r,n=Object.keys(a),s=t.split("+");for(let t=0;t<s.length;t++){const r=s[t];let o=!1;if("shift"===r?o=!!e.shiftKey:"ctrl"===r?o=!!e.ctrlKey:"alt"===r?o=!!e.altKey:"meta"===r?o=!!e.metaKey:-1!==n.indexOf(r)?o=e.keyCode===a[r]:e.keyCode===r.toUpperCase().charCodeAt(0)&&(o=!0),!o)return!1}return!0}}},"./src/js/utils/orbitControls.js":e=>{e.exports=function(e){var t=e.MOUSE;function a(t){this.object=t,this.target=new e.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25;var a,r,n,s,o,i,l,h,c=this,d=1e-6,u=0,m=0,p=1,g=new e.Vector3,f=!1;this.getPolarAngle=function(){return r},this.getAzimuthalAngle=function(){return a},this.rotateLeft=function(e){m-=e},this.rotateUp=function(e){u-=e},this.panLeft=(n=new e.Vector3,function(e){var t=this.object.matrix.elements;n.set(t[0],t[1],t[2]),n.multiplyScalar(-e),g.add(n)}),this.panUp=function(){var t=new e.Vector3;return function(e){var a=this.object.matrix.elements;t.set(a[4],a[5],a[6]),t.multiplyScalar(e),g.add(t)}}(),this.pan=function(t,a,r,n){if(c.object instanceof e.PerspectiveCamera){var s=c.object.position.clone().sub(c.target).length();s*=Math.tan(c.object.fov/2*Math.PI/180),c.panLeft(2*t*s/n),c.panUp(2*a*s/n)}else c.object instanceof e.OrthographicCamera?(c.panLeft(t*(c.object.right-c.object.left)/r),c.panUp(a*(c.object.top-c.object.bottom)/n)):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.")},this.dollyIn=function(t){c.object instanceof e.PerspectiveCamera?p/=t:c.object instanceof e.OrthographicCamera?(c.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom*t)),c.object.updateProjectionMatrix(),f=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.dollyOut=function(t){c.object instanceof e.PerspectiveCamera?p*=t:c.object instanceof e.OrthographicCamera?(c.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/t)),c.object.updateProjectionMatrix(),f=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.update=(s=new e.Vector3,o=(new e.Quaternion).setFromUnitVectors(t.up,new e.Vector3(0,1,0)),i=o.clone().inverse(),l=new e.Vector3,h=new e.Quaternion,function(){var e=this.object.position;s.copy(e).sub(this.target),s.applyQuaternion(o),a=Math.atan2(s.x,s.z),r=Math.atan2(Math.sqrt(s.x*s.x+s.z*s.z),s.y),a+=m,r+=u,a=Math.max(this.minAzimuthAngle,Math.min(this.maxAzimuthAngle,a)),r=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,r)),r=Math.max(d,Math.min(Math.PI-d,r));var t=s.length()*p;return t=Math.max(this.minDistance,Math.min(this.maxDistance,t)),this.target.add(g),s.x=t*Math.sin(r)*Math.sin(a),s.y=t*Math.cos(r),s.z=t*Math.sin(r)*Math.cos(a),s.applyQuaternion(i),e.copy(this.target).add(s),this.object.lookAt(this.target),!0===this.enableDamping?(m*=1-this.dampingFactor,u*=1-this.dampingFactor):(m=0,u=0),p=1,g.set(0,0,0),!!(f||l.distanceToSquared(this.object.position)>d||8*(1-h.dot(this.object.quaternion))>d)&&(l.copy(this.object.position),h.copy(this.object.quaternion),f=!1,!0)})}function r(t,r){var n=new a(t);this.domElement=void 0!==r?r:document,Object.defineProperty(this,"constraint",{get:function(){return n}}),this.getPolarAngle=function(){return n.getPolarAngle()},this.getAzimuthalAngle=function(){return n.getAzimuthalAngle()},this.enabled=!0,this.center=this.target,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:e.MOUSE.LEFT,ZOOM:e.MOUSE.MIDDLE,PAN:e.MOUSE.RIGHT};var s=this,o=new e.Vector2,i=new e.Vector2,l=new e.Vector2,h=new e.Vector2,c=new e.Vector2,d=new e.Vector2,u=new e.Vector2,m=new e.Vector2,p=new e.Vector2,g=-1,f=0,v=1,b=2,y=3,w=4,L=5,M=g;this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom;var x={type:"change"},E={type:"start"},T={type:"end"};function R(e,t){var a=s.domElement===document?s.domElement.body:s.domElement;n.pan(e,t,a.clientWidth,a.clientHeight)}function S(){return Math.pow(.95,s.zoomSpeed)}function A(e){if(!1!==s.enabled){if(e.preventDefault(),e.button===s.mouseButtons.ORBIT){if(!1===s.enableRotate)return;M=f,o.set(e.clientX,e.clientY)}else if(e.button===s.mouseButtons.ZOOM){if(!1===s.enableZoom)return;M=v,u.set(e.clientX,e.clientY)}else if(e.button===s.mouseButtons.PAN){if(!1===s.enablePan)return;M=b,h.set(e.clientX,e.clientY)}M!==g&&(document.addEventListener("mousemove",C,!1),document.addEventListener("mouseup",j,!1),s.dispatchEvent(E))}}function C(e){if(!1!==s.enabled){e.preventDefault();var t=s.domElement===document?s.domElement.body:s.domElement;if(M===f){if(!1===s.enableRotate)return;i.set(e.clientX,e.clientY),l.subVectors(i,o),n.rotateLeft(2*Math.PI*l.x/t.clientWidth*s.rotateSpeed),n.rotateUp(2*Math.PI*l.y/t.clientHeight*s.rotateSpeed),o.copy(i)}else if(M===v){if(!1===s.enableZoom)return;m.set(e.clientX,e.clientY),p.subVectors(m,u),p.y>0?n.dollyIn(S()):p.y<0&&n.dollyOut(S()),u.copy(m)}else if(M===b){if(!1===s.enablePan)return;c.set(e.clientX,e.clientY),d.subVectors(c,h),R(d.x,d.y),h.copy(c)}M!==g&&s.update()}}function j(){!1!==s.enabled&&(document.removeEventListener("mousemove",C,!1),document.removeEventListener("mouseup",j,!1),s.dispatchEvent(T),M=g)}function P(e){if(!1!==s.enabled&&!1!==s.enableZoom&&M===g){e.preventDefault(),e.stopPropagation();var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?n.dollyOut(S()):t<0&&n.dollyIn(S()),s.update(),s.dispatchEvent(E),s.dispatchEvent(T)}}function _(e){if(!1!==s.enabled&&!1!==s.enableKeys&&!1!==s.enablePan)switch(e.keyCode){case s.keys.UP:R(0,s.keyPanSpeed),s.update();break;case s.keys.BOTTOM:R(0,-s.keyPanSpeed),s.update();break;case s.keys.LEFT:R(s.keyPanSpeed,0),s.update();break;case s.keys.RIGHT:R(-s.keyPanSpeed,0),s.update()}}function F(e){if(!1!==s.enabled){switch(e.touches.length){case 1:if(!1===s.enableRotate)return;M=y,o.set(e.touches[0].pageX,e.touches[0].pageY);break;case 2:if(!1===s.enableZoom)return;M=w;var t=e.touches[0].pageX-e.touches[1].pageX,a=e.touches[0].pageY-e.touches[1].pageY,r=Math.sqrt(t*t+a*a);u.set(0,r);break;case 3:if(!1===s.enablePan)return;M=L,h.set(e.touches[0].pageX,e.touches[0].pageY);break;default:M=g}M!==g&&s.dispatchEvent(E)}}function H(e){if(!1!==s.enabled){e.preventDefault(),e.stopPropagation();var t=s.domElement===document?s.domElement.body:s.domElement;switch(e.touches.length){case 1:if(!1===s.enableRotate)return;if(M!==y)return;i.set(e.touches[0].pageX,e.touches[0].pageY),l.subVectors(i,o),n.rotateLeft(2*Math.PI*l.x/t.clientWidth*s.rotateSpeed),n.rotateUp(2*Math.PI*l.y/t.clientHeight*s.rotateSpeed),o.copy(i),s.update();break;case 2:if(!1===s.enableZoom)return;if(M!==w)return;var a=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY,f=Math.sqrt(a*a+r*r);m.set(0,f),p.subVectors(m,u),p.y>0?n.dollyOut(S()):p.y<0&&n.dollyIn(S()),u.copy(m),s.update();break;case 3:if(!1===s.enablePan)return;if(M!==L)return;c.set(e.touches[0].pageX,e.touches[0].pageY),d.subVectors(c,h),R(d.x,d.y),h.copy(c),s.update();break;default:M=g}}}function U(){!1!==s.enabled&&(s.dispatchEvent(T),M=g)}function I(e){e.preventDefault()}this.update=function(){this.autoRotate&&M===g&&n.rotateLeft(2*Math.PI/60/60*s.autoRotateSpeed),!0===n.update()&&this.dispatchEvent(x)},this.reset=function(){M=g,this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(x),this.update()},this.dispose=function(){this.domElement.removeEventListener("contextmenu",I,!1),this.domElement.removeEventListener("mousedown",A,!1),this.domElement.removeEventListener("mousewheel",P,!1),this.domElement.removeEventListener("MozMousePixelScroll",P,!1),this.domElement.removeEventListener("touchstart",F,!1),this.domElement.removeEventListener("touchend",U,!1),this.domElement.removeEventListener("touchmove",H,!1),document.removeEventListener("mousemove",C,!1),document.removeEventListener("mouseup",j,!1),window.removeEventListener("keydown",_,!1)},this.domElement.addEventListener("contextmenu",I,!1),this.domElement.addEventListener("mousedown",A,!1),this.domElement.addEventListener("mousewheel",P,!1),this.domElement.addEventListener("MozMousePixelScroll",P,!1),this.domElement.addEventListener("touchstart",F,!1),this.domElement.addEventListener("touchend",U,!1),this.domElement.addEventListener("touchmove",H,!1),window.addEventListener("keydown",_,!1),this.update()}return t||(t={LEFT:0,MIDDLE:1,RIGHT:2}),r.prototype=Object.create(e.EventDispatcher.prototype),r.prototype.constructor=r,Object.defineProperties(r.prototype,{object:{get:function(){return this.constraint.object}},target:{get:function(){return this.constraint.target},set:function(e){console.warn("THREE.OrbitControls: target is now immutable. Use target.set() instead."),this.constraint.target.copy(e)}},minDistance:{get:function(){return this.constraint.minDistance},set:function(e){this.constraint.minDistance=e}},maxDistance:{get:function(){return this.constraint.maxDistance},set:function(e){this.constraint.maxDistance=e}},minZoom:{get:function(){return this.constraint.minZoom},set:function(e){this.constraint.minZoom=e}},maxZoom:{get:function(){return this.constraint.maxZoom},set:function(e){this.constraint.maxZoom=e}},minPolarAngle:{get:function(){return this.constraint.minPolarAngle},set:function(e){this.constraint.minPolarAngle=e}},maxPolarAngle:{get:function(){return this.constraint.maxPolarAngle},set:function(e){this.constraint.maxPolarAngle=e}},minAzimuthAngle:{get:function(){return this.constraint.minAzimuthAngle},set:function(e){this.constraint.minAzimuthAngle=e}},maxAzimuthAngle:{get:function(){return this.constraint.maxAzimuthAngle},set:function(e){this.constraint.maxAzimuthAngle=e}},enableDamping:{get:function(){return this.constraint.enableDamping},set:function(e){this.constraint.enableDamping=e}},dampingFactor:{get:function(){return this.constraint.dampingFactor},set:function(e){this.constraint.dampingFactor=e}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.constraint.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.constraint.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor=e}}}),r}},"./src/css/app.scss":(e,t,a)=>{"use strict";a.r(t)}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,